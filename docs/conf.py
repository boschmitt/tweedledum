# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- Project information -----------------------------------------------------

project = 'tweedledum'
copyright = '2018, Bruno Schmitt'
author = 'Bruno Schmitt'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = 'alpha-v1'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.mathjax', 'breathe', 'sphinxcontrib.bibtex', 'sphinx.ext.todo'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', '.venv', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'tweedledumdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'tweedledum.tex', 'tweedledum Documentation',
     'Bruno Schmitt', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'tweedledum', 'tweedledum Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'tweedledum', 'tweedledum Documentation',
     author, 'tweedledum', 'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------
todo_include_todos = True

# -- Options for breathe -----------------------------------------------------

import subprocess, os

read_the_docs_build = os.environ.get('READTHEDOCS', None) == 'True'

if read_the_docs_build:
    subprocess.call('doxygen Doxyfile', shell = True)

breathe_projects = {"tweedledum": "doxyxml/xml"}
breathe_default_project = "tweedledum"

# -- Custom directives -------------------------------------------------------

import os
from docutils import nodes
from docutils.parsers.rst import Directive
import xml.etree.ElementTree as ET

class DocSynthesisTableDirective(Directive):
    has_content = False

    def run(self):
        doc = ET.parse("doxyxml/xml/namespacetweedledum.xml")
        members = doc.findall("compounddef/sectiondef[@kind='func']/memberdef/detaileddescription/para/xrefsect/xrefdescription/[para='synthesis ']/../../../..")

        table = nodes.table()
        tgroup = nodes.tgroup(cols = 4)
        tgroup += nodes.colspec(colwidth = 50)
        tgroup += nodes.colspec(colwidth = 100)
        tgroup += nodes.colspec(colwidth = 50)
        tgroup += nodes.colspec(colwidth = 50)

        # header
        tgroup += nodes.thead('', nodes.row('', *[nodes.entry('', nodes.line(text = c)) for c in ["Function", "Description", "Expects", "Returns"]]))
        
        # body
        tbody = nodes.tbody()

        for member in members:
            text = member.find('name').text.strip()
            brief = member.find('briefdescription/para').text.strip()

            expects = "foo"
            returns = "bar"

            for e in member.findall('detaileddescription/para/xrefsect'):
                key = e.find('xreftitle').text.strip()
                value = e.find('xrefdescription/para').text.strip()

                if key == "algexpects":
                    expects = value
                elif key == "algreturns":
                    returns = value

            filename = os.path.basename(member.find('location').attrib['file'])[:-4]
            ref = nodes.reference('', text, internal = True)
            ref['refuri'] = 'synthesis/{}.html#{}'.format(filename, member.attrib["id"])
            reft = nodes.paragraph()
            reft.extend([ref])
            function = nodes.entry('', reft)
            description = nodes.entry('', nodes.line(text = brief))
            expects = nodes.entry('', nodes.line(text = expects))
            returns = nodes.entry('', nodes.line(text = returns))
            tbody += nodes.row('', function, description, expects, returns)

        tgroup += tbody
        table += tgroup
        return [table]

def setup(app):
    app.add_directive('doc_synthesis_table', DocSynthesisTableDirective)