name: Build dev wheels

on:
  workflow_dispatch:

jobs:
  setup_date:
    name: Setup version timestamp
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.date.outputs.now }}
    steps:
    - id: date 
      run: echo "::set-output name=now::$(date +'%Y%m%d%H%M')"

  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest
    needs: setup_date
    env:
      TWEEDLEDUM_DEV_VERSION: ${{needs.setup_date.outputs.timestamp}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install build

      - name: Build sdist
        run: |
          python -m build --sdist --outdir wheelhouse

      - name: Upload built sdist
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.tar.gz

  build_wheels:
    name: Wheels â€¢ ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: setup_date
    strategy:
      fail-fast: false
      matrix:
        include:
        # Supported macOS-10.x
        - os: macos-10.15
          build: "cp3*-macosx_x86_64"
          name: macOS (10.15+)
          target: '10.15'
        # macOS-11
        # - os: macos-11
        #   build: "cp3*-macosx_arm64 cp3*-macosx_x86_64"
        #   name: macOS (11.0)
        # - os: macos-11
        #   build: "cp3*-macosx_universal2"
        #   name: macOS Universal2 (11.0)
        #   target: '11.0'
        # Windows
        - os: windows-latest
          build: "cp3*-win_amd64"
          name: Windows 64-bit
          arch: x64
        - os: windows-latest
          build: "cp3*-win32"
          name: Windows 32-bit
          arch: x86
        # Linux
        - os: ubuntu-latest
          build: "cp3*-manylinux_i686"
          name: Linux Intel 32-bit
          platform: intel
        - os: ubuntu-latest
          build: "cp3*-manylinux_x86_64"
          name: Linux Intel 64-bit
          platform: intel
        # Since this relies on QEMU, I separated the jobs here to
        # speedup the action
        - os: ubuntu-latest
          build: "cp36-manylinux_aarch64"
          name: Linux ARM 64-bit (py36-aarch64)
          platform: aarch64
        - os: ubuntu-latest
          build: "cp37-manylinux_aarch64"
          name: Linux ARM 64-bit (py37-aarch64)
          platform: aarch64
        - os: ubuntu-latest
          build: "cp38-manylinux_aarch64"
          name: Linux ARM 64-bit (py38-aarch64)
          platform: aarch64
        - os: ubuntu-latest
          build: "cp39-manylinux_aarch64"
          name: Linux ARM 64-bit (py39-aarch64)
          platform: aarch64
        # Since this relies on QEMU, I separated the jobs here to
        # speedup the action
        - os: ubuntu-latest
          build: "cp36-manylinux_ppc64le"
          name: Linux POWER8 64-bit (py36-ppc64le)
          platform: ppc64le
        - os: ubuntu-latest
          build: "cp37-manylinux_ppc64le"
          name: Linux POWER8 64-bit (py37-ppc64le)
          platform: ppc64le
        - os: ubuntu-latest
          build: "cp38-manylinux_ppc64le"
          name: Linux POWER8 64-bit (py38-ppc64le)
          platform: ppc64le
        - os: ubuntu-latest
          build: "cp39-manylinux_ppc64le"
          name: Linux POWER8 64-bit (py39-ppc64le)
          platform: ppc64le
        # Since this relies on QEMU, I separated the jobs here to
        # speedup the action
        - os: ubuntu-latest
          build: "cp36-manylinux_s390x"
          name: Linux IBM/Z (py36-s390x)
          platform: s390x
        - os: ubuntu-latest
          build: "cp37-manylinux_s390x"
          name: Linux IBM/Z (py37-s390x)
          platform: s390x
        - os: ubuntu-latest
          build: "cp38-manylinux_s390x"
          name: Linux IBM/Z (py38-s390x)
          platform: s390x
        - os: ubuntu-latest
          build: "cp39-manylinux_s390x"
          name: Linux IBM/Z (py39-s390x)
          platform: s390x

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: ${{ matrix.arch }}

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.9

      - name: Set up QEMU
        if: runner.os == 'Linux' && matrix.platform != 'intel'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ matrix.platform }}

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1.9.0
        if: runner.os == 'Windows'
        with:
            arch: ${{ matrix.arch }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.1.1
        env:
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_ARCHS: all
          CIBW_ENVIRONMENT_LINUX: "TWEEDLEDUM_DEV_VERSION=${{needs.setup_date.outputs.timestamp}}"
          CIBW_ENVIRONMENT_MACOS: "${{ matrix.flags }} _PYTHON_HOST_PLATFORM=macosx-${{ matrix.target }}-x86_64"
          CIBW_ENVIRONMENT_WINDOWS: "CC=cl.exe CXX=cl.exe"
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest --import-mode importlib -v {project}/python/test/
          CMAKE_BUILD_PARALLEL_LEVEL: 2
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.target }}
          TWEEDLEDUM_DEV_VERSION: ${{needs.setup_date.outputs.timestamp}}

      - name: Upload built wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl
